// File: src/pages/FormDetailView.jsx

import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { BASE_URL } from '../config';
import './StartForm.css'; // Reusing the same CSS for layout/styling

const checklistLabels = [
  'рдкрд╛рд░реНрдХрд┐рдВрдЧ рдмреНрд░реЗрдХ', 'рд▓рд╛рдЗрдЯреНрд╕ рдФрд░ рд╣реЙрд░реНрди', 'рдбреИрд╢рдмреЛрд░реНрдб',
  'рд▓рд╛рдЗрдЯреНрд╕ рд╡рд╛рдЗрдкрд░', 'рд╕рд╛рдЗрдВрдЯ рдмреЛрд░реНрдб', 'рдмреИрдардХ рд╕реАрдЯ/рд╕реБрд░рдХреНрд╖рд╛ рдмреЗрд▓реНрдЯ',
  'рд╣реЙрдкрд░', 'рд╕реНрдЯреЗрдкреНрд╕ / рд╣реИрдВрдб рд░реЗрд▓реНрд╕', 'рдЗрдВрдЬрди рдЖрд╡рд╛рдЬ',
  'рд╕рд╛рдЗрд░рди', 'рдЯрд╛рдпрд░ / рд╡реНрд╣реАрд▓ рдирдЯреНрд╕ / рд░рд┐рдореНрд╕', 'рд╕реНрдЯреАрдпрд░рд┐рдВрдЧ',
  'рдЯреВрд▓ рдмреЙрдХреНрд╕', 'рджрд░рд╡рд╛рдЬрд╛ / рд╢реАрд╢рд╛ / рдЧреЗрдЯреНрд╕', 'рд░реЗрдбрд┐рдПрдЯрд░',
  'рдмреИрдЯрд░реА', 'рдлрд╛рдпрд░ рдПрдХреНрд╕реНрдЯрд┐рдВрдЧреБрд╢рд░', 'рдорд┐рд░рд░',
];

const FormDetailView = () => {
  const { formId } = useParams();
  const navigate = useNavigate();
  const [form, setForm] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchForm = async () => {
      try {
        const res = await axios.get(`${BASE_URL}/api/form/${formId}`);
        setForm(res.data);
      } catch (err) {
        console.error('Error fetching form data:', err);
      } finally {
        setLoading(false);
      }
    };
    fetchForm();
  }, [formId]);

  const convertToIST = (utcTime) => {
    const date = new Date(utcTime);
    return date.toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' });
  };

  if (loading) {
    return <p className="text-center p-6">Loading form details...</p>;
  }

  if (!form) {
    return <p className="text-center text-red-600 p-6">Form not found.</p>;
  }

  const { tripDetails = {}, checklist = {}, notes = '', repairReported, mechanicPin, driverPin, tripRows = [], breakdownNote = '', footerPins = {} } = form;

  return (
    <div className="form-wrapper">
      <div className="a4-form">
        <button
          onClick={() => navigate(-1)}
          className="mb-4 bg-blue-500 text-white px-4 py-2 rounded shadow"
        >
          тЖР Back
        </button>

        <div className="form-header">
          <h2>рдереНрд░рд┐рд╡реЗрдгреА рд╕реИрдирд┐реШ рдорд╛рдЗрдВрд╕ рдкреНрд░рд╛рдЗрд╡реЗрдЯ рд▓рд┐рдорд┐рдЯреЗрдб</h2>
          <h3>рдкрдЪрдореА рдмреЛрдХрд╛рд░реЛ рдХреЛрд▓ рдорд╛рдЗрдВрд╕ рдкреНрд░реЛрдЬреЗрдХреНрдЯ</h3>
          <h4>рдкреНрд░рд╛рд░рдВрднрд┐рдХ рдкреНрд░реА-рд╕реНрдЯрд╛рд░реНрдЯ рдЪреЗрдХ рд▓рд┐рд╕реНрдЯ (Read-Only)</h4>
        </div>

        {/* Checklist */}
        <div className="checklist-grid">
          {checklistLabels.map((label, idx) => (
            <div key={idx} className="checklist-item">
              <span>{label}</span>
              <span>
                <label>
                  <input type="radio" checked={checklist?.[idx] === 'OK'} readOnly /> OK
                </label>
                <label>
                  <input type="radio" checked={checklist?.[idx] === 'Not OK'} readOnly /> Not OK
                </label>
              </span>
            </div>
          ))}
        </div>

        {/* Notes */}
        <div className="info-section">
          <label>рдЕрдиреНрдп рд╕реВрдЪрдирд╛:</label>
          <textarea value={notes} readOnly />
        </div>

        {/* Repair Report */}
        <div className="checkbox-line">
          <span>рдЖрд╡рд╢реНрдпрдХ рд░рд┐рдкреЗрд░рд┐рдВрдЧ рдХреА рд╕реВрдЪрдирд╛ рд╕реБрдкрд░рд╡рд╛рдЗрдЬрд╝рд░ рдХреЛ рджреА:</span>
          <label>
            <input type="radio" checked={repairReported === 'yes'} readOnly /> рд╣рд╛рдВ
          </label>
          <label>
            <input type="radio" checked={repairReported === 'no'} readOnly /> рдирд╣реАрдВ
          </label>
          <label>
            рдореИрдХреЗрдирд┐рдХрд▓ рдбрд┐рдкрд╛рд░реНрдЯрдореЗрдВрдЯ PIN:
            <input type="password" value={mechanicPin} readOnly />
          </label>
          <label>
            рдбреНрд░рд╛рдЗрд╡рд░ PIN:
            <input type="password" value={driverPin} readOnly />
          </label>
        </div>

        {/* Trip Details */}
        <div className="dumper-trip-report">
          <div className="section-title">ЁЯЪЫ рдбрдореНрдкрд░ рдЯреНрд░рд┐рдк рд░рд┐рдкреЛрд░реНрдЯ</div>
          <div className="input-grid">
            <div><label>рджрд┐рдирд╛рдВрдХ:</label><p>{tripDetails.tripDate}</p></div>
            <div><label>рд╢рд┐рдлреНрдЯ:</label><p>{tripDetails.shift}</p></div>
            <div><label>рд░рд┐рд▓реЗ:</label><p>{tripDetails.relay}</p></div>
            <div><label>рдбреНрд░рд╛рдЗрд╡рд░ рдХрд╛ рдирд╛рдо:</label><p>{tripDetails.driverName}</p></div>
            <div><label>рдбрдВрдкрд░ рд╕рдВрдЦреНрдпрд╛:</label><p>{tripDetails.dumperNumber}</p></div>
            <div><label>рдСрдкрд░реЗрдЯрд░ ID:</label><p>{tripDetails.operatorId}</p></div>
            <div><label>рд╕реНрдЯрд╛рд░реНрдЯрд┐рдВрдЧ HMR:</label><p>{tripDetails.startHMR}</p></div>
            <div><label>рдХреНрд▓реЛрдЬрд┐рдВрдЧ HMR:</label><p>{tripDetails.closeHMR}</p></div>
            <div><label>рд╕реНрдЯрд╛рд░реНрдЯрд┐рдВрдЧ рдХрд┐рд▓реЛрдореАрдЯрд░:</label><p>{tripDetails.startKM}</p></div>
            <div><label>рдХреНрд▓реЛрдЬрд┐рдВрдЧ рдХрд┐рд▓реЛрдореАрдЯрд░:</label><p>{tripDetails.closeKM}</p></div>
          </div>
        </div>

        {/* Trip Table */}
        <table className="details-table">
          <thead>
            <tr>
              <th>рдЯрд┐рдкрд░ рд╕рдВрдЦреНрдпрд╛</th>
              <th>рд╕рдордп</th>
              <th>рдорд╢реАрди рдирдВрдмрд░</th>
              <th>рдорд╛рд▓</th>
              <th>рдХрд╛рд░реНрдп рд╕реНрдерд▓</th>
              <th>рдХрд╛рд░реНрдп</th>
            </tr>
          </thead>
          <tbody>
            {tripRows.map((row, i) => (
              <tr key={i}>
                <td>{i + 1}</td>
                <td>{convertToIST(row.startTime)}</td>
                <td>{row.machine}</td>
                <td>{row.material}</td>
                <td>{row.site}</td>
                <td>{row.status === 'completed' ? 'тЬЕ Done' : 'тП│ In Progress'}</td>
              </tr>
            ))}
          </tbody>
        </table>

        {/* Breakdown Section */}
        <div className="footer-section">
          <label>рдмреНрд░реЗрдХрдбрд╛рдЙрди рд░рд┐рдкреЛрд░реНрдЯ рд╡ рдЯрд┐рдкреНрдкрдгрд┐рдпрд╛рдБ:</label>
          <textarea value={breakdownNote} readOnly />

          <div className="pin-grid">
            <label>
              рдбреНрд░рд╛рдЗрд╡рд░ Pin:
              <input type="password" value={footerPins.driver || ''} readOnly />
            </label>
            <label>
              рд╢рд┐рдлреНрдЯ рд╕реБрдкрд░рд╡рд╛рдЗрдЬрд░ Pin:
              <input type="password" value={footerPins.supervisor || ''} readOnly />
            </label>
            <label>
              рд╢рд┐рдлреНрдЯ рдЗрдиреНрдЪрд╛рд░реНрдЬ Pin:
              <input type="password" value={footerPins.incharge || ''} readOnly />
            </label>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FormDetailView;

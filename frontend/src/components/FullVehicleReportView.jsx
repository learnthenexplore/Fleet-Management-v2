import React, { useState } from 'react';
import './FullVehicleReportView.css';
import axios from 'axios';
import { BASE_URL } from '../config';
import './FullVehicleReportView.css';
const checklistLabels = [
  '‡§™‡§æ‡§∞‡•ç‡§ï‡§ø‡§Ç‡§ó ‡§¨‡•ç‡§∞‡•á‡§ï', '‡§≤‡§æ‡§á‡§ü‡•ç‡§∏ ‡§î‡§∞ ‡§π‡•â‡§∞‡•ç‡§®', '‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°',
  '‡§≤‡§æ‡§á‡§ü‡•ç‡§∏ ‡§µ‡§æ‡§á‡§™‡§∞', '‡§∏‡§æ‡§á‡§Ç‡§ü ‡§¨‡•ã‡§∞‡•ç‡§°', '‡§¨‡•à‡§†‡§ï ‡§∏‡•Ä‡§ü/‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§¨‡•á‡§≤‡•ç‡§ü',
  '‡§π‡•â‡§™‡§∞', '‡§∏‡•ç‡§ü‡•á‡§™‡•ç‡§∏ / ‡§π‡•à‡§Ç‡§° ‡§∞‡•á‡§≤‡•ç‡§∏', '‡§á‡§Ç‡§ú‡§® ‡§Ü‡§µ‡§æ‡§ú',
  '‡§∏‡§æ‡§á‡§∞‡§®', '‡§ü‡§æ‡§Ø‡§∞ / ‡§µ‡•ç‡§π‡•Ä‡§≤ ‡§®‡§ü‡•ç‡§∏ / ‡§∞‡§ø‡§Æ‡•ç‡§∏', '‡§∏‡•ç‡§ü‡•Ä‡§Ø‡§∞‡§ø‡§Ç‡§ó',
  '‡§ü‡•Ç‡§≤ ‡§¨‡•â‡§ï‡•ç‡§∏', '‡§¶‡§∞‡§µ‡§æ‡§ú‡§æ / ‡§∂‡•Ä‡§∂‡§æ / ‡§ó‡•á‡§ü‡•ç‡§∏', '‡§∞‡•á‡§°‡§ø‡§è‡§ü‡§∞',
  '‡§¨‡•à‡§ü‡§∞‡•Ä', '‡§´‡§æ‡§Ø‡§∞ ‡§è‡§ï‡•ç‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó‡•Å‡§∂‡§∞', '‡§Æ‡§ø‡§∞‡§∞',
];

const FullVehicleReportView = ({
  readOnly = false,
  newTripRow = {},
  updateNewRow = () => {},
  startTripDirect = () => {},
  endTripRow = () => {},
  worksiteOptions = [],
  breakdownNote = '',
  setBreakdownNote = () => {},
  footerPins = {},
  setFooterPins = () => {},
  handleSubmitBreakdown = () => {},
  form = {},
}) => {
  const {
    _id: formId,
    tripDetails = {},
    checklist = {},
    notes = '',
    repairReported = '',
    mechanicPin = '',
    driverPin = '',
    tripRows = [],
    breakdownNote: savedBreakdownNote = '',
    footerPins: savedFooterPins = {},
  } = form;

  const [closeKM, setCloseKM] = useState(tripDetails.closeKM || '');
  const [closeHMR, setCloseHMR] = useState(tripDetails.closeHMR || '');
  const [saving, setSaving] = useState(false);

  // --- MIC INPUT LOGIC ---
  const startListening = (callback, type = 'text') => {
    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.lang = 'hi-IN';
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;

    recognition.onresult = (event) => {
      let transcript = event.results[0][0].transcript;
      if (type === 'number') {
        transcript = transcript.replace(/[^\d]/g, '');
      } else if (type === 'alphanumeric') {
        transcript = transcript.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();
      }
      callback(prev => (prev ? prev + ' ' : '') + transcript);
    };

    recognition.onerror = (event) => alert('‡§Æ‡§æ‡§á‡§ï ‡§∏‡•á ‡§á‡§®‡§™‡•Å‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§™‡§æ‡§Ø‡§æ: ' + event.error);
    recognition.start();
  };

  const handleBreakdownMicInput = () => {
    startListening((valueFn) => setBreakdownNote(prev => (prev ? prev + ' ' : '') + valueFn('')), 'text');
  };

  // --- END MIC LOGIC ---

  const convertToIST = (utcTime) => {
    const date = new Date(utcTime);
    return date.toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' });
  };

  const handleSaveCloseValues = async () => {
    const startKM = parseFloat(tripDetails.startKM || '0');
    const startHMR = parseFloat(tripDetails.startHMR || '0');
    const enteredCloseKM = parseFloat(closeKM || '0');
    const enteredCloseHMR = parseFloat(closeHMR || '0');
    if (!closeKM || !closeHMR) {
      alert('‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó HMR ‡§î‡§∞ ‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó ‡§ï‡§ø‡§≤‡•ã‡§Æ‡•Ä‡§ü‡§∞ ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§≠‡§∞‡•á‡§Ç');
      return;
    }
    if (enteredCloseKM <= startKM || enteredCloseHMR <= startHMR) {
      alert('‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó HMR ‡§î‡§∞ ‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó ‡§ï‡§ø‡§≤‡•ã‡§Æ‡•Ä‡§ü‡§∞ ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è');
      return;
    }
    try {
      setSaving(true);
      await axios.patch(`http://localhost:5000/api/form/vehicle-report/${formId}/close-values`, {
        closeKM,
        closeHMR,
      });
      alert('‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡•á‡§µ ‡§π‡•ã ‡§ó‡§à');
    } catch (err) {
      console.error(err);
      alert('‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à');
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="form-wrapper">
      <div className="a4-form">
        <div className="form-header section-card">
          <h2>‡§§‡•ç‡§∞‡§ø‡§µ‡•á‡§£‡•Ä ‡§∏‡•à‡§®‡§ø‡§ï ‡§Æ‡§æ‡§á‡§®‡§ø‡§Ç‡§ó ‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§ü ‡§≤‡§ø‡§Æ‡§ø‡§ü‡•á‡§°</h2>
          <h3>‡§™‡§ï‡§∞‡•Ä ‡§¨‡§∞‡§¨‡§°‡•Ä‡§π  ‡§ï‡•ã‡§≤ ‡§Æ‡§æ‡§á‡§Ç‡§∏ ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü</h3>
          <h4>‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠‡§ø‡§ï ‡§™‡•ç‡§∞‡•Ä-‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ö‡•á‡§ï ‡§≤‡§ø‡§∏‡•ç‡§ü</h4>
        </div>

        <div className="section-card">
          <h4>‡§™‡•ç‡§∞‡•Ä-‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ö‡•á‡§ï‡§≤‡§ø‡§∏‡•ç‡§ü</h4>
          <div className="checklist-grid">
            {checklistLabels.map((label, idx) => (
              <div key={idx} className="checklist-item">
                <span>{label}</span>
                <span>
                  <label>
                    <input type="radio" checked={checklist?.[idx] === 'OK'} readOnly />
                    <span className="ok-label">‚úîÔ∏è OK</span>
                  </label>
                  <label style={{ marginLeft: 12 }}>
                    <input type="radio" checked={checklist?.[idx] === 'Not OK'} readOnly />
                    <span className="notok-label">‚ùå Not OK</span>
                  </label>
                </span>
              </div>
            ))}
          </div>
        </div>

        <div className="section-card info-section">
          <label>‡§Ö‡§®‡•ç‡§Ø ‡§∏‡•Ç‡§ö‡§®‡§æ:</label>
          <textarea value={notes} readOnly />
        </div>

        <div className="section-card checkbox-line">
          <span>‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§∞‡§ø‡§™‡•á‡§∞‡§ø‡§Ç‡§ó ‡§ï‡•Ä ‡§∏‡•Ç‡§ö‡§®‡§æ ‡§∏‡•Å‡§™‡§∞‡§µ‡§æ‡§á‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§¶‡•Ä:</span>
          <label>
            <input type="radio" checked={repairReported === 'yes'} readOnly /> ‡§π‡§æ‡§Ç
          </label>
          <label>
            <input type="radio" checked={repairReported === 'no'} readOnly /> ‡§®‡§π‡•Ä‡§Ç
          </label>
          <label>
            ‡§Æ‡•à‡§ï‡•á‡§®‡§ø‡§ï‡§≤ ‡§°‡§ø‡§™‡§æ‡§∞‡•ç‡§ü‡§Æ‡•á‡§Ç‡§ü PIN:
            <input type="password" value={mechanicPin} readOnly />
          </label>
          <label>
            ‡§°‡•ç‡§∞‡§æ‡§á‡§µ‡§∞ PIN:
            <input type="password" value={driverPin} readOnly />
          </label>
        </div>

        <div className="section-card dumper-trip-report">
          <div className="section-title">üöõ ‡§°‡§Æ‡•ç‡§™‡§∞ ‡§ü‡•ç‡§∞‡§ø‡§™ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü</div>
          <div className="input-grid">
            <div><label>‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï:</label><p>{tripDetails.tripDate}</p></div>
            <div><label>‡§∂‡§ø‡§´‡•ç‡§ü:</label><p>{tripDetails.shift}</p></div>
            <div><label>‡§∞‡§ø‡§≤‡•á:</label><p>{tripDetails.relay}</p></div>
            <div><label>‡§°‡•ç‡§∞‡§æ‡§á‡§µ‡§∞ ‡§ï‡§æ ‡§®‡§æ‡§Æ:</label><p>{tripDetails.driverName}</p></div>
            <div><label>‡§°‡§Ç‡§™‡§∞ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ:</label><p>{tripDetails.dumperNumber}</p></div>
            <div><label>‡§ë‡§™‡§∞‡•á‡§ü‡§∞ ID:</label><p>{tripDetails.operatorId}</p></div>
            <div><label>‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü‡§ø‡§Ç‡§ó HMR:</label><p>{tripDetails.startHMR}</p></div>

            <div>
              <label>‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó HMR:</label>
              {readOnly ? (
                <p>{tripDetails.closeHMR}</p>
              ) : (
                <>
                  <input
                    type="number"
                    value={closeHMR}
                    onChange={(e) => setCloseHMR(e.target.value)}
                    placeholder="HMR"
                  />
                  <button
                    type="button"
                    onClick={() =>
                      startListening(
                        (valueFn) =>
                          setCloseHMR((prev) => (prev ? prev + ' ' : '') + valueFn('')),
                        'number'
                      )
                    }
                    className="mic-btn"
                  >
                    üé§
                  </button>
                </>
              )}
            </div>

            <div><label>‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§ï‡§ø‡§≤‡•ã‡§Æ‡•Ä‡§ü‡§∞:</label><p>{tripDetails.startKM}</p></div>

            <div>
              <label>‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó ‡§ï‡§ø‡§≤‡•ã‡§Æ‡•Ä‡§ü‡§∞:</label>
              {readOnly ? (
                <p>{tripDetails.closeKM}</p>
              ) : (
                <>
                  <input
                    type="number"
                    value={closeKM}
                    onChange={(e) => setCloseKM(e.target.value)}
                    placeholder="KM"
                  />
                  <button
                    type="button"
                    onClick={() =>
                      startListening(
                        (valueFn) =>
                          setCloseKM((prev) => (prev ? prev + ' ' : '') + valueFn('')),
                        'number'
                      )
                    }
                    className="mic-btn"
                  >
                    üé§
                  </button>
                </>
              )}
            </div>
          </div>

          {!readOnly && (
            <button className="submit-btn" onClick={handleSaveCloseValues} disabled={saving}>
              {saving ? '‡§∏‡•á‡§µ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...' : ' ‡§∏‡•á‡§µ ‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç'}
            </button>
          )}
        </div>

        <div className="section-card">
          <table className="details-table">
            <thead>
              <tr>
                <th>‡§ü‡§ø‡§™‡§∞ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ</th>
                <th>‡§∏‡§Æ‡§Ø</th>
                <th>‡§Æ‡§∂‡•Ä‡§® ‡§®‡§Ç‡§¨‡§∞</th>
                <th>‡§Æ‡§æ‡§≤</th>
                <th>‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§∏‡•ç‡§•‡§≤</th>
                <th>‡§ï‡§æ‡§∞‡•ç‡§Ø</th>
              </tr>
            </thead>
            <tbody>
              {tripRows.map((row, i) => (
                <tr key={i}>
                  <td>{i + 1}</td>
                  <td>{convertToIST(row.startTime)}</td>
                  <td>{row.machine}</td>
                  <td>{row.material}</td>
                  <td>{row.site}</td>
                  <td>
                    {row.status === 'completed' ? '‚úÖ Done' : !readOnly && (
                      <button className="end-btn" onClick={() => endTripRow(row._id)}>‚èπ End</button>
                    )}
                  </td>
                </tr>
              ))}

              {!readOnly && (tripRows.length === 0 || tripRows.every((r) => r.status === 'completed')) && (
                <tr>
                  <td>{tripRows.length + 1}</td>
                  <td>
                    <input
                      value={newTripRow.startTime}
                      onChange={(e) => updateNewRow('startTime', e.target.value)}
                      placeholder="HH:MM"
                    />
                    <button
                      className="set-btn"
                      onClick={() => {
                        const now = new Date().toLocaleTimeString('en-GB', {
                          hour: '2-digit',
                          minute: '2-digit',
                        });
                        updateNewRow('startTime', now);
                      }}
                    >Set</button>
                  </td>
                  <td>
                    <input
                      value={newTripRow.machine}
                      onChange={(e) => updateNewRow('machine', e.target.value)}
                    />
                  </td>
                  <td>
                    <label>
                      <input
                        type="radio"
                        name="material"
                        value="OB"
                        checked={newTripRow.material === 'OB'}
                        onChange={() => updateNewRow('material', 'OB')}
                      /> OB
                    </label>
                    <label style={{ marginLeft: 10 }}>
                      <input
                        type="radio"
                        name="material"
                        value="Coal"
                        checked={newTripRow.material === 'Coal'}
                        onChange={() => updateNewRow('material', 'Coal')}
                      /> Coal
                    </label>
                  </td>
                  <td>
                    <select
                      value={newTripRow.site}
                      onChange={(e) => updateNewRow('site', e.target.value)}
                    >
                      <option value="">-- ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§∏‡•ç‡§•‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç --</option>
                      {worksiteOptions.map((opt, idx) => (
                        <option key={idx} value={opt}>{opt}</option>
                      ))}
                    </select>
                  </td>
                  <td>
                    <button className="start-btn" onClick={startTripDirect}>üöÄ Save & Start</button>
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        <div className="footer-section section-card">
          <label>‡§¨‡•ç‡§∞‡•á‡§ï‡§°‡§æ‡§â‡§® ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§µ ‡§ü‡§ø‡§™‡•ç‡§™‡§£‡§ø‡§Ø‡§æ‡§Å:</label>
          <textarea
            value={breakdownNote || savedBreakdownNote}
            onChange={(e) => setBreakdownNote(e.target.value)}
            placeholder="‡§Ø‡§π‡§æ‡§Å ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§≤‡§ø‡§ñ‡•á‡§Ç ‡§Ø‡§æ ‡§Æ‡§æ‡§á‡§ï ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç"
          />
          <button type="button" className="mic-btn" onClick={handleBreakdownMicInput} style={{ marginTop: 8 }}>
            üé§ ‡§Æ‡§æ‡§á‡§ï ‡§∏‡•á ‡§¨‡•ã‡§≤‡•á
          </button>

          <div className="pin-grid">
            <label>
              ‡§°‡•ç‡§∞‡§æ‡§á‡§µ‡§∞ Pin:
              <input
                type="password"
                maxLength="6"
                value={footerPins.driver || savedFooterPins.driver || ''}
                onChange={(e) => setFooterPins({ ...footerPins, driver: e.target.value })}
              />
            </label>
            <label>
              ‡§∂‡§ø‡§´‡•ç‡§ü ‡§∏‡•Å‡§™‡§∞‡§µ‡§æ‡§á‡§ú‡§∞ Pin:
              <input
                type="password"
                maxLength="6"
                value={footerPins.supervisor || savedFooterPins.supervisor || ''}
                onChange={(e) => setFooterPins({ ...footerPins, supervisor: e.target.value })}
              />
            </label>
            <label>
              ‡§∂‡§ø‡§´‡•ç‡§ü ‡§á‡§®‡•ç‡§ö‡§æ‡§∞‡•ç‡§ú Pin:
              <input
                type="password"
                maxLength="6"
                value={footerPins.incharge || savedFooterPins.incharge || ''}
                onChange={(e) => setFooterPins({ ...footerPins, incharge: e.target.value })}
              />
            </label>
          </div>

          <button className="submit-btn" onClick={handleSubmitBreakdown}>‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç</button>
        </div>
      </div>
    </div>
  );
};

export default FullVehicleReportView;